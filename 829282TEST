local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("Sad TESTTTT", {
    main_color = Color3.fromRGB(10, 22, 74),
    min_size = Vector2.new(685, 550),
    can_resize = false,
})

local function setFontRecursive(guiObject, font)
    for _, obj in pairs(guiObject:GetDescendants()) do
        if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
            obj.Font = font
        end
    end
end

spawn(function()
    repeat wait() until window.gui
    setFontRecursive(window.gui, Enum.Font.GothamSemibold)
end)

local tabCal = window:AddTab("Calculator")

local folderDamage = tabCal:AddFolder("Damage Calculator")
local lblTitleDamage = folderDamage:AddLabel("Strength To Damage")
lblTitleDamage.TextSize = 30

local BASE_DAMAGE_FACTOR = 0.1
local PACK_FACTOR_PER_PACK = 0.0335
local PACKS_MAX = 8

local function parseValue(s)
    if not s then return 0 end
    s = s:upper():gsub("%s", ""):gsub(",", "")
    local suffixes = { B = 1e9, T = 1e12, QA = 1e15 }
    local numPart, suf = s:match("^([%-]?[%d%.]+)(%a*)$")
    if not numPart then return 0 end
    local n = tonumber(numPart) or 0
    if suf ~= "" and suffixes[suf] then
        return n * suffixes[suf]
    end
    return n
end

local function formatValue(n)
    local absn = math.abs(n)
    local sign = n < 0 and "-" or ""
    if absn >= 1e15 then
        return string.format("%s%.2fQa", sign, absn / 1e15)
    elseif absn >= 1e12 then
        return string.format("%s%.2fT", sign, absn / 1e12)
    elseif absn >= 1e9 then
        return string.format("%s%.2fB", sign, absn / 1e9)
    else
        return string.format("%s%.2f", sign, absn)
    end
end

local function getCurrentStrength()
    local player = game.Players.LocalPlayer
    if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Strength") then
        return tonumber(player.leaderstats.Strength.Value) or 0
    end
    return 0
end

local lblUsedStrength = folderDamage:AddLabel("Used Strength: -")
local lblBaseDamage   = folderDamage:AddLabel("Base Damage: -")
local lblFinalDamage  = folderDamage:AddLabel("Damage with X Packs: -")
local lblIncrease     = folderDamage:AddLabel("Damage Increase: -")

local strengthText = "7.08Qa"
local packsCount = 8
local useCurrentStrength = true
local useFullPacks = true

local function updateDisplay()
    local strength = useCurrentStrength and getCurrentStrength() or parseValue(strengthText)
    local packs = useFullPacks and PACKS_MAX or packsCount
    local baseDamage = strength * BASE_DAMAGE_FACTOR
    local finalDamage = strength * (BASE_DAMAGE_FACTOR + PACK_FACTOR_PER_PACK * packs)
    local increaseValue = finalDamage - baseDamage
    local increasePercent = baseDamage > 0 and ((finalDamage / baseDamage) - 1) * 100 or 0
    lblUsedStrength.Text = "Used Strength: " .. formatValue(strength)
    lblBaseDamage.Text   = "Base Damage: " .. formatValue(baseDamage)
    lblFinalDamage.Text = string.format("Damage with %d Packs: %s", packs, formatValue(finalDamage))
    lblFinalDamage.TextColor3 = Color3.fromRGB(255, 0, 0)
    lblIncrease.Text = string.format("Damage Increase: %s (+%.0f%%)", formatValue(increaseValue), increasePercent)
end

folderDamage:AddTextBox("Strength Input", function(value)
    strengthText = value
    if not useCurrentStrength then updateDisplay() end
end, { clear = false, text = strengthText })

folderDamage:AddTextBox("Packs Count (0-8)", function(value)
    local num = tonumber(value) or 0
    if num < 0 then num = 0 elseif num > PACKS_MAX then num = PACKS_MAX end
    packsCount = num
    if not useFullPacks then updateDisplay() end
end, { clear = false, text = tostring(packsCount) })

folderDamage:AddSwitch("Use Current Strength", function(state)
    useCurrentStrength = state
    updateDisplay()
end):Set(useCurrentStrength)

folderDamage:AddSwitch("Use Full Packs (8)", function(state)
    useFullPacks = state
    updateDisplay()
end):Set(useFullPacks)

local player = game.Players.LocalPlayer
if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Strength") then
    player.leaderstats.Strength.Changed:Connect(function()
        if useCurrentStrength then updateDisplay() end
    end)
end
updateDisplay()

local folderDur = tabCal:AddFolder("Durabilidade Calculator")
local lblTitleHits = folderDur:AddLabel("Hit Calculations")
lblTitleHits.TextSize = 30

local ULTIMATE_BOOST_PERCENT = 75
local PETS_BOOST_PER_PACK = 33.125
local ATTACK_SPEED = 1.3

local function getCurrentDurability()
    local player = game.Players.LocalPlayer
    if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Durability") then
        return parseValue(player.leaderstats.Durability.Value)
    end
    return 0
end

local initialDurability = getCurrentDurability()
local durabilityText = formatValue(initialDurability)
local packsCountDur = PACKS_MAX
local useCurrentDurability = true
local useFullPacksDur = true
local incomingDamage = parseValue("2.6Qa")

local lblPlayerDur = folderDur:AddLabel("Player Durability: -")
local lblUltimate  = folderDur:AddLabel("Ultimate Boost: -")
local lblPets      = folderDur:AddLabel("Pets Boost: -")
local lblTotalHP   = folderDur:AddLabel("Total Health: -")
local lblHitsKill  = folderDur:AddLabel("Hits to Kill: -")
local lblTimeKill  = folderDur:AddLabel("Time to Kill: -")

local function updateDisplayDurability()
    local dur = useCurrentDurability and getCurrentDurability() or parseValue(durabilityText)
    local packs = useFullPacksDur and PACKS_MAX or packsCountDur
    local ultimateBoostValue = dur * (ULTIMATE_BOOST_PERCENT / 100)
    local petsBoostValue = dur * ((PETS_BOOST_PER_PACK * packs) / 100)
    local totalHealth = dur + ultimateBoostValue + petsBoostValue
    local hitsToKill = (incomingDamage > 0) and math.max(1, math.ceil(totalHealth / incomingDamage)) or 0
    local timeToKillSec = (ATTACK_SPEED > 0) and (hitsToKill / ATTACK_SPEED) or 0
    local minutes = math.floor(timeToKillSec / 60)
    local seconds = timeToKillSec - (minutes * 60)
    lblPlayerDur.Text = string.format("Player Durability: %s", formatValue(dur))
    lblUltimate.Text  = string.format("Ultimate Boost: %s (+%d%%)", formatValue(ultimateBoostValue), ULTIMATE_BOOST_PERCENT)
    lblPets.Text      = string.format("Pets Boost (%d): %s (+%.3f%%)", packs, formatValue(petsBoostValue), PETS_BOOST_PER_PACK * packs)
    lblTotalHP.Text   = string.format("Total Health: %s", formatValue(totalHealth))
    lblTotalHP.TextColor3 = Color3.fromRGB(0, 255, 255)
    lblHitsKill.Text  = string.format("Hits to Kill: %d", hitsToKill)
    lblTimeKill.Text  = string.format("Time to Kill: %dm %.1fs", minutes, seconds)
end

folderDur:AddTextBox("Durability Input", function(value)
    durabilityText = value
    updateDisplayDurability()
end, { clear = false, text = durabilityText })

folderDur:AddTextBox("Target Packs Count (0-8)", function(value)
    local num = tonumber(value) or 0
    if num < 0 then num = 0 elseif num > PACKS_MAX then num = PACKS_MAX end
    packsCountDur = num
    if not useFullPacksDur then updateDisplayDurability() end
end, { clear = false, text = tostring(packsCountDur) })

folderDur:AddTextBox("Incoming Damage (per hit)", function(value)
    incomingDamage = parseValue(value)
    updateDisplayDurability()
end, { clear = false, text = formatValue(incomingDamage) })

folderDur:AddSwitch("Use Current Durability", function(state)
    useCurrentDurability = state
    updateDisplayDurability()
end, { state = useCurrentDurability })

folderDur:AddSwitch("Use Full Packs", function(state)
    useFullPacksDur = state
    updateDisplayDurability()
end, { state = useFullPacksDur })

if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Durability") then
    player.leaderstats.Durability.Changed:Connect(function()
        if useCurrentDurability then updateDisplayDurability() end
    end)
end
updateDisplayDurability()
